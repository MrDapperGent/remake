#!/bin/bash

# ==== Utility functions ====
escape()
{
echo "$1"| sed -e "s/ /\\\\\\ /g"
}

abspath(){
	readlink -m "$1"
}

renderscript(){
	[ ! -d "`dirname "$RENDERSCRIPT"`" ] || mkdir -p "`dirname "$RENDERSCRIPT"`"
	if [ -z $UPDATE ]; then
		UPDATE=0
	fi
	cat > "$RENDERSCRIPT" << EOF
import sys

try:
	import Blender
	blender_version = "2.4x"
except:
	import bpy
	blender_version = "2.5x"
	

def main():
	update = $UPDATE
	if blender_version == "2.4x":
		# Blender 2.4x
		for sce in Blender.Scene.Get():
			rend = sce.render
			rend.freeImages = True
			rend.saveBuffers = True
			rend.compositeFree = True
	
			#rend.oversampling = $OSA
	
			#rend.OSALevel = 8
	
			rend.fieldRendering = False
	
			if sce.getName() == 'Scene':
				sce.makeCurrent()
	
		# Scene rendering setting
		sce = Blender.Scene.GetCurrent()
		
		for ob in sce.objects:
			if ob.name=="$CAMERA":
				sce.setCurrentCamera(ob)
				break
		
		rend = sce.render

		rend.renderwinSize = 100

		#rend.enablePremultiply()

		#rend.enableRGBAColor()

		# Suff for updating file
		size_x = rend.sizeX
		size_y = rend.sizeY
		fps = rend.fps
EOF
	# Get image dimensions from file if it's unspecified


	[ -z $WIDTH ] || echo "		rend.sizeX = $WIDTH" >> "$RENDERSCRIPT"
	[ -z $HEIGHT ] || echo "		rend.sizeY = $HEIGHT" >> "$RENDERSCRIPT"

	cat >> "$RENDERSCRIPT" << EOF

		rend.xParts = 4
		rend.yParts = 4

		rend.fps = $FPS

		# OPENEXR stuff
		#rend.zbuf = False
		#rend.halfFloat = True
		#rend.preview = False

		rend.touch = False
		rend.noOverwrite = False

		# rend.imageType = Blender.Scene.Render.$BLENDERFORMAT

		# Update .blend file if we have width or height changed
		if update != 0 and ( size_x != rend.sizeX or size_y != rend.sizeY or fps != rend.fps ):
			Blender.Save("`pwd`/$TARGET", 1)
	else:
		# Blender 2.5x
		for sce in bpy.data.scenes:
			rend = sce.render
			#rend.use_free_image_textures = True		# not in 2.53 yet
			#rend.use_save_buffers = True				# not in 2.53 yet
			#rend.use_free_unused_nodes = True			# not in 2.53 yet
			
			#rend.use_antialiasing = $OSA				# not in 2.53 yet
	
			#rend.antialiasing_samples = '8'
	
			#rend.use_fields = False					# not in 2.53 yet
		
		# Settings below should apply for current scene
		sce = bpy.context.scene
		
		for ob in sce.objects:
			if ob.name=="$CAMERA":
				sce.camera=ob
				break
		
		rend = sce.render

		rend.resolution_percentage = 100

		#rend.alpha_mode = "PREMUL"

		#rend.color_mode = "RGBA"

		# Suff for updating file
		size_x = rend.resolution_x
		size_y = rend.resolution_y
		fps = rend.fps
EOF
	# Get image dimensions from file if it's unspecified


	[ -z $WIDTH ] || echo 	"		rend.resolution_x = $WIDTH" >> "$RENDERSCRIPT"
	[ -z $HEIGHT ] || echo	"		rend.resolution_y = $HEIGHT" >> "$RENDERSCRIPT"

	cat >> "$RENDERSCRIPT" << EOF

		rend.parts_x = 4
		rend.parts_y = 4

		rend.fps = $FPS

		# OPENEXR stuff
		#rend.exr_zbuf = False
		#rend.use_exr_half = True
		#rend.exr_preview = False

		rend.use_placeholder = False
		rend.use_overwrite = True

		# rend.file_format = $BLENDERFORMAT

		# Update .blend file if we have width or height changed
		if update != 0 and ( size_x != rend.resolution_x or size_y != rend.resolution_y or fps != rend.fps ):
			bpy.ops.wm.save_mainfile("EXEC_DEFAULT",filepath="`pwd`/$TARGET")


	
if __name__ == '__main__':
	main()
EOF
}

# ==== Module functions ====

format(){
	echo $FORMAT
}

check(){
	if ! ( which blender > /dev/null 2>&1 ); then
		echo "   FATAL: Can't find 'blender' binary!" >&2
		exit 1
	fi
}

deps(){
	if [ ! -z "$1" ]; then 
		TARGET=$1
	fi
	
	SCRIPTPATH="$(abspath "${0}")_deps"
	
	blender -b "`abspath $TARGET`" -P "$SCRIPTPATH" 2>&1 | grep -E "^dependency: " | sed -e 's/^dependency: //' | 	while read LINE; do
		echo $LINE
		if ( echo $LINE | grep -E '.blend$' >/dev/null); then
			deps "$LINE"
		fi
	done
}

rules(){
	OSA="True"
	
	BLENDERFORMAT=`echo $FORMAT | tr '[:lower:]' '[:upper:]'`
	if [[ $BLENDERFORMAT == 'MPG' ]]; then
		BLENDERFORMAT="MPEG"
	fi
	
	RENDERSCRIPT="`echo "$RENDERPATH" | sed -e "s|\.$FORMAT$|.py|"`"
	renderscript

	if [ ! -z $SINGLE ]; then
		RANGE="-f $SINGLE"
		OUTPUT="\`pwd\`/${RENDERPATH}-######"
		echo "`escape "$RENDERPATH"`: `escape "$TARGET"` $DEPS" >> "$MAKEFILE"
		echo "	rm -rf \"$RENDERPATH\"" >> "$MAKEFILE"
		echo "	blender -b \"\`pwd\`/$TARGET\" -S Scene -P \"\`pwd\`/$RENDERSCRIPT\" -o \"$OUTPUT\" -x 0 -F $BLENDERFORMAT -t 0 $RANGE | grep -E '^Saved: '" >> "$MAKEFILE"
		echo "	mv \"${RENDERPATH}-`printf %06d $SINGLE`\" \"$RENDERPATH\"" >> "$MAKEFILE"
	else
		RANGE="-a"
		if [[ $BLENDERFORMAT == 'PNG' ]]; then
			OUTPUT="\`pwd\`/$RENDERPATH/file.####"
			echo "`escape "$RENDERPATH"`: `escape "$RENDERPATH/file.lst"`" >> "$MAKEFILE"
			echo "	touch \"$RENDERPATH\"" >> "$MAKEFILE"
			echo "`escape "$RENDERPATH/file.lst"`: `escape "$TARGET"` $DEPS" >> "$MAKEFILE"
		fi
		if [[ $BLENDERFORMAT == 'MPEG' ]]; then
			OUTPUT="\`pwd\`/$RENDERPATH"
			echo "`escape "$RENDERPATH"`: `escape "$TARGET"` $DEPS" >> "$MAKEFILE"
		fi
		echo "	rm -rf \"$RENDERPATH\"" >> "$MAKEFILE"
		if [[ $BLENDERFORMAT == 'PNG' ]]; then
			echo "	mkdir -p \"$RENDERPATH\"" >> "$MAKEFILE"
		fi
		echo "	-blender -b \"\`pwd\`/$TARGET\" -S Scene -P \"\`pwd\`/$RENDERSCRIPT\" -o \"$OUTPUT\" -x 1 -F $BLENDERFORMAT -t 0 $RANGE | grep -E '^Saved: '" >> "$MAKEFILE"
		if [[ $BLENDERFORMAT == 'PNG' ]]; then
			echo "	echo \"FPS $FPS\" > \"$RENDERPATH/file.lst\"" >> "$MAKEFILE"
			echo "	( cd \"$RENDERPATH\"; ls -1 *.$FORMAT >> file.lst )" >> "$MAKEFILE"
		fi
	fi

	echo "`escape "$RENDERPATH-clean:"`" >> "$MAKEFILE"
	echo "	rm -rf \"$RENDERPATH\"" >> "$MAKEFILE"
	echo "	rm -rf \"$RENDERSCRIPT\"" >> "$MAKEFILE"
}

$1 "$2"
