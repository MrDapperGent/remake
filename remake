#!/bin/bash

set -e

SCRIPT_PATH="${BASH_SOURCE[0]}";
if([ -h "${SCRIPT_PATH}" ]) then
  while([ -h "${SCRIPT_PATH}" ]) do SCRIPT_PATH=`readlink "${SCRIPT_PATH}"`; done
fi
pushd . > /dev/null
cd `dirname ${SCRIPT_PATH}` > /dev/null
SCRIPT_PATH=`pwd`;
popd  > /dev/null
#SCRIPT_PATH=$(cd `dirname $0`; pwd)
#REPOROOT=$(dirname `git rev-parse --git-dir`)

usage()
{
cat << EOF
usage: $0 [options] file [action]

This script generates Makefile and renders your 
animation project taking all dependencies into 
account.

OPTIONS:
   -h      Show this message
   -k      Keep Makefile so you can re-invoke rendering by typing 'make'
EOF
}

relpath(){
	if [[ "$1" == "$2" ]]
	then
		echo "."
	fi

	IFS="/"

	current=($1)
	absolute=($2)

	abssize=${#absolute[@]}
	cursize=${#current[@]}

	while [[ ${absolute[$level]} == ${current[$level]} ]]
	do
		(( level++ ))
		if (( level > abssize || level > cursize ))
		then
			break
		fi
	done

	for ((i = level; i < cursize; i++))
	do
		if ((i > level))
		then
			newpath=$newpath"/"
		fi
		newpath=$newpath".."
	done

	for ((i = level; i < abssize; i++))
	do
		if [[ -n $newpath ]]
		then
			newpath=$newpath"/"
		fi
		newpath=$newpath${absolute[i]}
	done

	echo "$newpath"
}

mod_norender(){
	echo "${RENDERPATH}: $TARGET $DEPS" >> Makefile
	echo "	touch $RENDERPATH" >> Makefile
	echo "	touch `dirname $RENDERPATH`/.$FORMAT" >> Makefile # This line is mandatory here
	echo "${RENDERPATH}.clean:" >> Makefile
	echo "	rm -rf ${RENDERPATH}" >> Makefile
}

get_project_root() {
	if [ -f ./remake.conf ]; then
		pwd -P
	else
		if [[ `pwd -P` == '/' ]]; then
			echo "   ERROR: Not a 'remake' project." 1>&2
			exit
		fi
		pushd .. >/dev/null
		get_project_root
		popd >/dev/null
	fi
}

write_rules(){
	pushd `dirname $1` >/dev/null
	PROJECTROOT=`get_project_root`
	RENDERPREFIX=$(pwd -P | sed -e "s|$PROJECTROOT||")
	[ -d $PROJECTROOT/render${RENDERPREFIX} ] || mkdir -p $PROJECTROOT/render${RENDERPREFIX}
	TARGETDIR=`pwd -P`
	popd  >/dev/null
	
	CONFIGPATH=$(relpath `pwd -P` $PROJECTROOT/remake.conf)
	
	# Ensure that render dir ignored by git
	[ -e $PROJECTROOT/.gitignore ] || touch $PROJECTROOT/.gitignore
	( cat $PROJECTROOT/.gitignore | egrep "render/\*" > /dev/null ) || ( echo "render/*" >> $PROJECTROOT/.gitignore )

	TARGET=$(relpath `pwd -P` $TARGETDIR)/`basename $1`
	EXT=${TARGET##*.}
	
	# Re-reading config
	. $PROJECTROOT/remake.conf
	
	# Looking for extra settings
	if [ -e ${TARGET}.conf ]; then
		. ${TARGET}.conf
	fi
	
	RENDERPATH="$(relpath `pwd -P` $PROJECTROOT/render${RENDERPREFIX})/`basename $TARGET`.$FORMAT"
	
	export WIDTH
	export HEIGHT
	export FORMAT
	export FPS
	export SINGLE
	
	export TARGET
	export RENDERPATH
	
	export MAKEFILE
	
	
	DEPS="$CONFIGPATH"
	PENDINGTARGETS=''
	echo "Retrieving deps for '$TARGET'..."
	if [ ! -f $SCRIPT_PATH/modules/mod_$EXT ]; then
		echo "   WARNING: Don't know how to handle file with $EXT extension."
		echo "            Skipping."
	else
		bash -x $SCRIPT_PATH/modules/mod_$EXT deps
		RAWDEPS=`bash -e $SCRIPT_PATH/modules/mod_$EXT deps`
		# Removing duplicates
		RAWDEPS=`echo "$RAWDEPS" | sort -u`
		# Check for new render targets
		if [ ! -z "$RAWDEPS" ];then
		while read LINE; do
			if [ -d `dirname "$LINE"` ]; then
				pushd `dirname "$LINE"` >/dev/null
				EXTPROJECTROOT=`get_project_root`
				popd  >/dev/null
			else
				EXTPROJECTROOT=""
			fi
			if [[ $EXTPROJECTROOT == "" ]]; then
				# Report files outside of the repo
				echo "   $LINE"
				echo "   WARNING: '$LINE' is not belongs to any project."
				echo "            Skipping."
			else
				pushd `dirname "$LINE"` >/dev/null
				DEPDIR=`pwd -P`
				popd >/dev/null
				LINE="$(relpath `pwd -P` $DEPDIR)/`basename "$LINE"`"
				#LINE=$(relpath `pwd` $LINE)
				echo "   $LINE"
				if ( echo $DEPDIR | grep -E "^${EXTPROJECTROOT}/render/" > /dev/null ); then
					
					#pushd `dirname $LINE` >/dev/null
					#DEPDIR=`pwd`
					#popd >/dev/null
					#DEP=$(relpath `pwd` $DEPDIR)/`basename $LINE`
					LINE=`echo "$LINE"| sed -e "s/ /\\\\ /g"`
					DEPS='$DEPS $LINE'
					
					echo "   INFO: Dependency '$LINE' defines another target."
					
					TARGETCANDIDATE=`echo $DEPDIR/$(basename "$LINE") | sed -e "s|\.$FORMAT$||" | sed -e "s|^${EXTPROJECTROOT}/render/|${EXTPROJECTROOT}/|"`
					if [ ! -e $TARGETCANDIDATE ]; then
						echo "   INFO: Trying to fix '$TARGETCANDIDATE' to '`dirname $TARGETCANDIDATE`'."
						TARGETCANDIDATE=`dirname $TARGETCANDIDATE`
						if [ ! -e $TARGETCANDIDATE ]; then
							echo "   ERROR: Not found!"
						else
							echo "         Successfull."
						fi
					fi
					
					if [ -e $TARGETCANDIDATE ]; then
						PENDINGTARGETS="$PENDINGTARGETS $TARGETCANDIDATE"
					fi
				else
					if [ ! -e "$LINE" ]; then
						# Report non-existing files
						echo "   WARNING: '$LINE' is not exists and not produced by any target."
						echo "            Skipping."
					else
						#pushd `dirname $LINE` >/dev/null
						#DEPDIR=`pwd`
						#popd >/dev/null
						#DEPS="$DEPS $(relpath `pwd` $DEPDIR)/`basename $LINE`"
						LINE=`echo "$LINE"| sed -e "s/ /\\\\ /g"`
						DEPS="$DEPS $LINE"
					fi
				fi
			fi
		done < <( echo "$RAWDEPS" )
		fi
		
		export DEPS
		
		bash -e $SCRIPT_PATH/modules/mod_$EXT rules
		
		echo ".PHONY: $RENDERPATH-clean" >> $MAKEFILE
		echo "clean: $RENDERPATH-clean" >> $MAKEFILE
		
		for TARGET in $PENDINGTARGETS;do
			# check if rules for this target are already written
			( cat $MAKEFILE | grep -E "^$TARGET:" >/dev/null ) || write_rules $TARGET
		done
	fi
}

OPT_KEEP=0
while getopts "hk" OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         k)
             OPT_KEEP=1
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

shift $(($OPTIND - 1))

if [ -z $1 ]; then
	echo
	echo "ERROR: Please specify filename to render. Aborting." >&2
	echo
	usage
	exit 1
fi

pushd `dirname $1`>/dev/null
PROJECTROOT=`get_project_root`
popd >/dev/null

[ -d ${PROJECTROOT}/render/tmp ] || mkdir -p ${PROJECTROOT}/render/tmp
MAKEFILE=${PROJECTROOT}/render/tmp/Makefile.$$
[ ! -e $MAKEFILE ] || rm $MAKEFILE
touch $MAKEFILE

#creating render dir
#[ -d $REPOROOT/render ] || mkdir -p $REPOROOT/render

write_rules $1
echo ".PHONY: clean" >> $MAKEFILE

[[ $OPT_KEEP == 0 ]] || cp -f $MAKEFILE Makefile

echo "Running make..."
make -f $MAKEFILE $2
rm -f $MAKEFILE
